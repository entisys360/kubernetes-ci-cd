parts:

  - name: Steps
    intro: In this part we will setup a local cluster with minikube, deploy a public image from dockerhub, customize that image, and then finally deploy it inside our local cluster.
    steps:

      - cap: Start up the Kubernetes cluster with Minikube, giving it some extra resources.
        com: minikube start --memory 7000 --cpus 2 --kubernetes-version v1.11.0

      - cap: Enable the Minikube add-ons Heapster and Ingress.
        com: minikube addons enable heapster; minikube addons enable ingress

      - cap: Deploy the public nginx image from DockerHub into a pod. Nginx is an open source web server that will automatically download from Docker Hub if it’s not available locally.
        com: kubectl run nginx --image nginx --port 80

      - cap: Create a service for deployment. This will expose the nginx pod so you can access it with a web browser.
        com: kubectl expose deployment nginx --type NodePort --port 80

      - cap: Launch a web browser to test the service. The nginx welcome page displays, which means the service is up and running.
        com: minikube service nginx

      - cap: Set up the cluster registry by applying a .yml manifest file.
        com: kubectl apply -f manifests/registry.yml

      - cap: Wait for the registry to finish deploying. Note that this may take several minutes.
        com: kubectl rollout status deployments/registry

      - cap: View the registry user interface in a web browser.
        com: minikube service registry-ui

      - cap: Let’s make a change to an HTML file in the cloned project. Running the command below will open /applications/hello-kenzan/index.html in the nano text editor. Change some text inside one of the <p> tags. For example, change “Hello from Kenzan!” to “Hello from Me!”. When you’re done, press Ctrl+X to close the file, type Y to confirm the filename, and press Enter to write the changes to the file.
        com: nano applications/hello-kenzan/index.html

      - cap: Now let’s build an image, giving it a special name that points to our local cluster registry.
        com: docker build -t alex301427/hello-kenzan:latest -f applications/hello-kenzan/Dockerfile applications/hello-kenzan

      - cap: With the image in our cluster registry, the last thing to do is apply the manifest to create and deploy the hello-kenzan pod based on the image.
        com: kubectl apply -f applications/hello-kenzan/k8s/deployment.yaml

      - cap: Launch a web browser and view the service.
        com: minikube service hello-kenzan

      - cap: Install Jenkins, which we’ll use to create our automated CI/CD pipeline. It will take the pod a minute or two to roll out.
        com: kubectl apply -f manifests/jenkins.yaml; kubectl rollout status deployment/jenkins

      - cap: Open the Jenkins UI in a web browser.
        com: minikube service jenkins

      - cap: Display the Jenkins admin password with the following command, and right-click to copy it. IMPORTANT: BE CAREFUL NOT TO PRESS CTRL-C TO COPY THE PASSWORD AS THIS WILL STOP THE SCRIPT.
        com: kubectl exec -it `kubectl get pods --selector=app=jenkins --output=jsonpath={.items..metadata.name}` cat /root/.jenkins/secrets/initialAdminPassword

      - cap: Switch back to the Jenkins UI. Paste the Jenkins admin password in the box and click Continue. Click Install suggested plugins and wait for the process to complete.
        com: echo '' 

      - cap: Create an admin user and credentials, and click Save and Finish. (Make sure to remember these credentials as you will need them for repeated logins.) Click Start using Jenkins.
        com: echo ''

      - cap: We now want to create a new pipeline for use with our Hello-Kenzan app. On the left, click New Item. Enter the item name as "Hello-Kenzan Pipeline", select Pipeline, and click OK.
        com: echo ''

      - cap: Under the Pipeline section at the bottom, change the Definition to be "Pipeline script from SCM". 
        com: echo ''

      - cap: Change the SCM to Git. 
        com: echo ''

      - cap: Change the Repository URL to be the URL of your forked Git repository, such as https://github.com/[GIT USERNAME]/kubernetes-ci-cd. Click Save. On the left, click Build Now to run the new pipeline. 
        com: echo ''

      - cap: Now view the Hello-Kenzan application.
        com: minikube service hello-kenzan

      - cap: Push a change to your fork. Run job again. View the changes.
        com: minikube service hello-kenzan
